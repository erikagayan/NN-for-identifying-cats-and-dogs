"""
This script does the conversion, loading images from folders and creates a loader
"""

import os
import torch
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
import matplotlib.pyplot as plt

# Transformations
transform = transforms.Compose([
    transforms.Resize((128, 128)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5], std=[0.5])
])

# Loading images from folders and Creating bootloaders
train_data = datasets.ImageFolder('../dataset', transform=transform)
train_loader = DataLoader(train_data, batch_size=32, shuffle=True)


# üìå 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞
for images, labels in train_loader:
    print("–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞:", images.shape)  # [32, 3, 128, 128]
    print("–ú–µ—Ç–∫–∏ –∫–ª–∞—Å—Å–æ–≤:", labels)       # —Ç–µ–Ω–∑–æ—Ä —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∫–ª–∞—Å—Å–æ–≤
    break

# üìå 6. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 6 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def show_images(images, labels, classes):
    fig, axes = plt.subplots(1, 6, figsize=(12, 4))
    for i in range(6):
        img = images[i] * 0.5 + 0.5  # –æ—Ç–º–µ–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é
        axes[i].imshow(img.permute(1, 2, 0))
        axes[i].set_title(classes[labels[i]])
        axes[i].axis("off")
    plt.show()

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏
classes = train_data.classes  # ['cat', 'dog']
show_images(images, labels, classes)
